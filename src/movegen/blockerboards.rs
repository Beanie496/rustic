use crate::defs::Bitboard;

pub type BlockerBoards = Vec<Bitboard>;

// create_blocker_boards() takes a piece mask. This is a bitboard in which all
// the bits are set for a square where a slider can move to, without the edges.
// (As generated by the functions in the mask.rs file.) create_blocker_boards()
// generates all possible permutations for the given mask, using the Carry
// Rippler method. See the given link, or http://rustic-chess.org for more
// information.

pub fn create_blocker_boards(mask: Bitboard) -> BlockerBoards {
    let d: Bitboard = mask;
    let mut bb_blocker_boards: BlockerBoards = Vec::new();
    let mut n: Bitboard = 0;

    // Carry-Rippler
    // https://www.chessprogramming.org/Traversing_Subsets_of_a_Set
    loop {
        bb_blocker_boards.push(n);
        n = n.wrapping_sub(d) & d;
        if n == 0 {
            break;
        }
    }

    bb_blocker_boards
}
